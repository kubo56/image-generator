from openai import OpenAI
from PIL import Image
import streamlit as st
from dotenv import load_dotenv
import os
import requests  # To handle image downloading

# Load the OpenAI API key from environment variable
load_dotenv()
API_KEY = os.getenv("OPENAI_API_KEY", "")

# Initialize the OpenAI client
client = OpenAI(api_key=API_KEY)

def generate_images(image_description, num_of_images=1, image_size='1024x1024', image_quality='standard'):
    images_urls = []
    revised_prompts = []
    for _ in range(num_of_images):  # Make multiple calls if more than one image is requested
        img_response = client.images.generate(
            model='dall-e-3',
            prompt=image_description,
            size=image_size,
            quality=image_quality,
            n=1  # Ensure n is set to 1 per API requirements
        )
        images_urls.append(img_response.data[0].url)  # Append each image URL to the list
        revised_prompts.append(img_response.data[0].revised_prompt)  # Capture the revised prompt
    return images_urls, revised_prompts

# Set up the Streamlit page configuration
st.set_page_config(page_title="DALL-E Image Generator", page_icon="ðŸ§ ", layout="wide")
st.title("DALL-E Image Generator")
st.subheader("Enter a text prompt and see the image generated by DALL-E")

# Sidebar for tips on crafting effective prompts
st.sidebar.header("Tips for Effective Prompts")
st.sidebar.write("""
- **Be Specific and Detailed**: More detailed descriptions often lead to more accurate and interesting images.
- **Context Matters**: Include context or emotion to give depth to your prompt.
- **Experiment with Complexity**: Try varying the complexity of your prompt to see different styles and results.
- **Use Proper Nouns Sparingly**: While specific, proper nouns can lead to unpredictable results because they rely heavily on the model's training data.
""")

# User inputs for the image description, number of images, size, and quality
img_description = st.text_input("Enter a description for your image", "a surreal image of a two-headed flamingo")
num_of_images = st.number_input("Number of images to generate", 1, 5, 1)
image_size = st.selectbox("Select image size", ('1024x1024', '1024x1792', '1792x1024'), index=0)
image_quality = st.selectbox("Select image quality", ('standard', 'hd'), index=0)

# Button to generate images
if st.button("Generate Image"):
    try:
        images_urls, revised_prompts = generate_images(img_description, num_of_images, image_size, image_quality)
        for url, revised_prompt in zip(images_urls, revised_prompts):
            image = Image.open(requests.get(url, stream=True).raw)
            st.image(image, use_column_width=True)
            st.text(f"Original Prompt: {img_description}\nRevised Prompt: {revised_prompt}")
    except Exception as e:
        st.error(f"An error occurred: {e}")
